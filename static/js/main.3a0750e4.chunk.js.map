{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","weather","setweather","cityName","useRef","location","setLocation","submit","setSubmit","useEffect","name","current","value","latitude","longitude","console","log","axios","get","then","res","newWeather","data","navigator","geolocation","getCurrentPosition","position","coords","error","Container","fluid","className","Row","Col","class","ref","type","placeholder","aria-label","Button","variant","onClick","Badge","main","temp","description","bg","wind","speed","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0SAmJeA,MA1If,WAAgB,IAAD,IACiBC,mBAAS,MAD1B,mBACNC,EADM,KACGC,EADH,KAIPC,EAAWC,iBAAO,MAJX,EAMmBJ,mBAAS,MAN5B,mBAMNK,EANM,KAMIC,EANJ,OAQeN,oBAAS,GARxB,mBAQNO,EARM,KAQEC,EARF,KAmEb,OAzDAC,qBAAU,WAER,IAAIC,EAAO,GAEPP,EAASQ,QAAQC,MACnBF,EAAI,YAAQP,EAASQ,QAAQC,OACpBP,GAEJA,IAEmB,SAAbA,EACTK,EAAO,aACEL,GAAYA,EAASQ,WAC9BH,EAAI,cAAUL,EAASQ,SAAnB,gBAAmCR,EAASS,aAIpDC,QAAQC,IAAI,SAAUN,GAClBA,GACFO,IAAMC,IAAN,0DAA6DR,EAA7D,yDACGS,MAAK,SAAAC,GACJ,IAAMC,EAAaD,EAAIE,KAGvBpB,EAAWmB,QAIhB,CAACd,EAAQF,IAGZI,qBAAU,WAGFc,UAAUC,YACZD,UAAUC,YAAYC,oBAAmB,SAACC,GACxCX,QAAQC,IAAI,iBAAkBU,EAASC,OAAOd,UAE9CP,EAAY,CACVO,SAAUa,EAASC,OAAOd,SAC1BC,UAAWY,EAASC,OAAOb,eAG5B,SAAUc,GAEXtB,EAAY,WAIdS,QAAQC,IAAI,mDAMf,IAGD,gCACE,cAACa,EAAA,EAAD,CAAWC,OAAK,EAACC,UAAU,oCAA3B,SACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UAAK,mDAIT,uBAMA,qBAAKF,UAAU,6BAAf,SACE,cAACF,EAAA,EAAD,UACE,eAACG,EAAA,EAAD,CAAKD,UAAU,yBAAf,UACE,qBAAKG,MAAM,gDAAX,SACE,uBAAOC,IAAKhC,EAAUiC,KAAK,OAAOF,MAAM,gBAAgBG,YAAY,kBAAkBC,aAAW,2BAKnG,8BAaN,cAACN,EAAA,EAAD,CAAKD,UAAU,2BAAf,SACE,cAACQ,EAAA,EAAD,CAAQC,QAAQ,UAAUT,UAAU,oCAAoCU,QAAS,WAE/E1B,QAAQC,IAAI,SAAUb,EAASQ,QAAQC,OAEvCJ,GAAWD,IAJb,sBAWF,uBAKe,OAAZN,EACC,qCACE,qBAAK8B,UAAY,sCAAjB,SACD,mCAAM9B,EAAQS,KAAd,iBAEC,sBAAKqB,UAAU,sCAAf,UACA,+CAAiB,eAACW,EAAA,EAAD,sBAASzC,QAAT,IAASA,GAAT,UAASA,EAAS0C,YAAlB,aAAS,EAAeC,WACzC,oCAAK3C,QAAL,IAAKA,OAAL,EAAKA,EAASA,QAAQ,GAAG4C,cACzB,8CAAgB,cAACH,EAAA,EAAD,CAAOI,GAAG,UAAV,gBAAqB7C,QAArB,IAAqBA,OAArB,EAAqBA,EAAS8C,KAAKC,QAAnD,aAIF,gDCjIKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhC,MAAK,YAAkD,IAA/CiC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.3a0750e4.chunk.js","sourcesContent":["import './App.css';\nimport { useState, useEffect, useRef } from \"react\"\nimport axios from 'axios';\nimport Button from 'react-bootstrap/Button';\nimport Badge from 'react-bootstrap/Badge';\nimport { Container, Row, Col, Input } from 'react-bootstrap'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  const [weather, setweather] = useState(null)\n\n  // const [cityName, setCityName] = useState(\"karachi\")\n  const cityName = useRef(null);\n\n  const [location, setLocation] = useState(null)\n\n  const [submit, setSubmit] = useState(false)\n\n  useEffect(() => {\n\n    let name = \"\";\n\n    if (cityName.current.value) {\n      name = `q=${cityName.current.value}`\n    } else if (location) {\n\n      if (!location) {\n\n      } else if (location === \"fail\") {\n        name = \"q=new york\";\n      } else if (location && location.latitude) {\n        name = `lat=${location.latitude}&lon=${location.longitude}`\n      }\n    }\n\n    console.log(\"name: \", name)\n    if (name) {\n      axios.get(`https://api.openweathermap.org/data/2.5/weather?${name}&appid=363a0329911c1b074081245aae1023c3&units=metric`)\n        .then(res => {\n          const newWeather = res.data;\n          // console.log(\"newWeather: \", newWeather);\n\n          setweather(newWeather);\n        });\n    }\n\n  }, [submit, location]);\n\n\n  useEffect(() => {\n\n    function getLocation() {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition((position) => {\n          console.log(\"position got: \", position.coords.latitude);\n          // console.log(\"position got: \", position.coords.longitude);\n          setLocation({\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude\n          })\n\n        }, function (error) {\n\n          setLocation(\"fail\")\n\n        });\n      } else {\n        console.log(\"Geolocation is not supported by this browser.\");\n      }\n    }\n\n    getLocation()\n\n  }, []);\n\n  return (\n    <div>\n      <Container fluid className=\"bg-success text-center text-white\">\n        <Row>\n          <Col><h1>WEATHER APP</h1></Col>\n        </Row>\n\n      </Container>\n      <br />\n      {/* <input onChange={(e) => {\n\n        console.log(\"e: \", e.target.value)\n        setCityName(e.target.value)\n      }} /> */}\n      <div className=\"d-flex justify-content-end\">\n        <Container>\n          <Row className=\"justify-content-center\">\n            <div class=\"input-group mb-3 w-50  justify-content-center\">\n              <input ref={cityName} type=\"text\" class=\"form-control \" placeholder=\"Enter City Name\" aria-label=\"Recipient's username\" />\n\n\n            </div>\n            {/* <input ref={cityName} /> */}\n            <br />\n\n          </Row>\n        </Container>\n        {/* <br/>\n<div className=\"mb-2 justify-content-center\">\n    <Button variant=\"primary\" size=\"md\">\n      Large button\n    </Button>\n</div> */}\n      </div>\n\n\n      <Row className=\" justify-content-center \">\n        <Button variant=\"primary\" className=\"justify-content-center btn-md wea\" onClick={() => {\n\n          console.log(\"name: \", cityName.current.value)\n\n          setSubmit(!submit)\n\n        }} >Submit</Button>\n      </Row>\n\n\n\n      <br />\n\n      {/* <h1>{weather?.main?.temp}</h1> */}\n\n      {\n        (weather !== null) ?\n          <>\n            <div className = \" bg-success text-center text-white \"> \n           <h1> {weather.name} Weather </h1>\n            </div>\n            <div className=\" justify-content-center text-center\">\n            <h1>Temperature: <Badge> {weather?.main?.temp}</Badge></h1>\n            <h2>{weather?.weather[0].description}</h2>\n            <h2>Wind Speed: <Badge bg=\"success\">{weather?.wind.speed}</Badge> </h2>\n            </div>\n          </>\n          :\n          <h1>Loading...</h1>\n      }\n\n    </div>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}